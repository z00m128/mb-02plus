;-------------------------------------;
;    ReFlasher for  MB03+ Ultimate    ;
;-------------------------------------;
; (c) 2021 z00m^SinDiKAT
; formatted for SjASMPlus

; Version: 1.5

		device	zxspectrum48

; Definitions
screen:		equ	#4000
attrs:		equ	#5800
ula:		equ	#fe
stat_ln_xy:	equ	#A332

; Main
		org	#8000

start:		di

		call	check_ret_bas		; fresh start or returning from bin loading?

again:		call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_action		; status text
		call	print42

		call	inkey.ANYKEY		; get user response
		ld	(key_store),a
		cp	'!'			; exit to basic
		jp	z,basic
		cp	'#'			; flash CFDriver
		jp	z,flash_cfdriver
		cp	'$'			; flash FATware
		jp	z,flash_fatware
		cp	'%'			; flash MDOS3
		jp	z,flash_mdos3
		cp	'&'			; flash TBIOS
		jp	z,flash_tbios
		cp	'*'			; flash all banks
		jp	z,flash_all
		cp	'+'			; flash DEMFIR
		jp	z,flash_demfir
		cp	'-'			; flash +divide
		jp	z,flash_pldivide
		cp	'0'
		jp	c,wrong_key
		cp	':'			; 0-9 range
		jp	c,range_nums
		cp	'@'
		jp	z,flash_unodos
		cp	'A'
		jp	c,wrong_key
		cp	'['			; A-Z range
		jp	nc,wrong_key

range_chars:	sub	'A'-10
		jr	do_chars

range_nums:	sub	'0'
do_chars:	sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	a,1
		ld	(ret_from_bas),a
		ld	a,(key_store)
		sub	38
		ld	c,a
		ld	b,0
		exx
		jp	basic2

; Programs CF Driver
flash_cfdriver:	ld	a,3
		ld	(ret_from_bas),a
		sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	bc,60
		exx
		jp	basic2

; Programs FATware
flash_fatware:	ld	a,2
		ld	(ret_from_bas),a
		sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	bc,61
		exx
		jp	basic2

; Programs MDOS3
flash_mdos3:	ld	a,2
		ld	(ret_from_bas),a
		sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	bc,62
		exx
		jp	basic2

; Programs TBIOS
flash_tbios:	ld	a,2
		ld	(ret_from_bas),a
		sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	bc,63
		exx
		jp	basic2

; Programs UnoDOS
flash_unodos:	ld	a,2
		ld	(ret_from_bas),a
		sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	bc,64
		exx
		jp	basic2

; Programs DEMFIR
flash_demfir:	ld	a,2
		ld	(ret_from_bas),a
		sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	bc,65
		exx
		jp	basic2

; Programs +divide
flash_pldivide:	ld	a,2
		ld	(ret_from_bas),a
		sla	a
		ld	(flash_block+1),a
		call	text_loading
		ld	bc,66
		exx
		jp	basic2

; Return from BASIC for singlebank programming
ret_singlebank:	call	flash_exec
		ret

; Return from BASIC for CFDriver
ret_cfdriver:	ld	a,'3'
		ld	(key_store),a
		call	flash_exec
		ret

; Return from BASIC for divIDE firmwares
ret_divide_fw:	ld	a,'2'
		ld	(key_store),a
		call	flash_exec
		ret

; Programs all banks at once
flash_all:	ld	a,9
		ld	(ret_from_bas),a
		inc	a
		ld	(basic_line),a

		ld	a,'0'
		ld	(key_store),a
		xor	a
		ld	(flash_bank),a
		ld	(flash_block+1),a

flash_all2:	ld	a,(basic_line)
		cp	20
		jr	nz,flash_all3
		ld	a,'A'
		ld	(key_store),a
		ld	a,27
		ld	(basic_line),a
		jr	flash_all4

flash_all3:	cp	53
		jr	z,flash_all5

flash_all4:	call	text_loading
		ld	a,(basic_line)
		ld	c,a
		ld	b,0
		exx
		jp	basic2

flash_all5:	call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_any_key		; Press any key status message
		call	print42
		call	inkey.ANYKEY
		jp	again

; Return from BASIC for programming all banks
ret_flashall:	call	flash_exec

		ld	a,(basic_line)
		inc	a
		ld	(basic_line),a

		ld	a,(key_store)
		inc	a
		ld	(key_store),a

		ld	a,(flash_bank)
		inc	a
		ld	(flash_bank),a

		sla	a
		ld	(flash_block+1),a

		pop	hl

		jp	flash_all2

; Checks if program run was fresh or not
check_ret_bas:	ld	a,(ret_from_bas)
		or	a
		jr	z,first_start
		cp	1
		jp	z,ret_singlebank
		cp	2
		jp	z,ret_divide_fw
		cp	3
		jp	z,ret_cfdriver
		cp	9
		jr	z,ret_flashall
		xor	a
		ld	(ret_from_bas),a
		ret

; If first start occurs, init screen
first_start:	xor	a
		out	(ula),a
		call	clear_screen
		call	draw_frame		; draws frame
		call	show_text		; displays all texts
		ret

; Quit to BASIC
basic:		call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_quit		; quit status message
		call	print42
		xor	a
		ld	(ret_from_bas),a
		ld	bc,9997
		exx

basic2:		ld	iy,#5c3a
		ld	hl,#2758
		exx
		im	1
		ei
		ret

; Displays "Wrong key!"
wrong_key:	call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_bad_key		; wrong key pressed
		call	print42
		call	dummy_loop
		jp	again

; Displays "Loading binary"
text_loading:	call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_loading		; loading message
		call	print42
		ret

; Clears status line
clear_stat_ln:	ld	hl,#5486
		ld	b,25
cl_st_ln_lp2:	push	bc
		push	hl
		ld	b,7
cl_st_ln_lp1:	xor	a
		ld	(hl),a
		call	downhl
		djnz	cl_st_ln_lp1
		pop	hl
		inc	hl
		pop	bc
		djnz	cl_st_ln_lp2
		ret

; Flash subroutine
flash_exec:	xor	a			;ZXi enable flash
		ld	bc,#703B
		out	(c),a

		ld	bc,#713B
		in	a,(c)			;remember machine
		push	af
		ld	a,#FF			;HW - FF - Flash firmware
		out	(c),a

;Ultimator enable flash
		ld	a,%01100011		;enable flash and write area0 and 1
		out	(#53),a
		xor	a
		out	(#27),a			;high byte of Page in Area0 #0000-#1FFF
		out	(#67),a			;high byte of Page in Area1
flash_block:	ld	a,0			;page 0+ Area0
		out	(#07),a
		inc	a			;page 1+ Area1
		out	(#47),a

		call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_erasing		;status text Erasing
		call	print42

;erase sectors (2KWord sector) 8 sectors to erase
erase:		ld	b,#08			;8 sector to erase
		ld	de,#0000
erase1:		ld	hl,#0555
		ld	a,#AA
		ld	(hl),a
		ld	hl,#02AA
		ld	a,#55
		ld	(hl),a
		ld	hl,#0555
		ld	a,#80
		ld	(hl),a
		ld	hl,#0555
		ld	a,#AA
		ld	(hl),a
		ld	hl,#02AA
		ld	a,#55
		ld	(hl),a
		ld	a,#50
		ld	(de),a
		ex	af,af'
		push	bc
		ld	bc,#500
erase2:		ex	af,af'
		ld	a,(de)
		rlca
		jr	c,erase_ok		;Data# Polling (DQ7) 0-erase is in progress, 1-end of erase
		ex	af,af'
		dec	bc
		ld	a,b
		or	c
		jr	nz,erase2
		pop	bc
erase_bad:	call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_ers_nok		;text Erasing went bad
		call	print42
		call	inkey.ANYKEY
		jp	flash_exit

erase_ok:	pop	bc
		ld	a,8			;add 2K
		add	a,d
		ld	d,a
		djnz	erase1

		call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_flash_bank	;text Progamming bank
		call	print42

;word program
program:	ld	de,#c000		; from (ZX RAM)
		ld	hl,#0000		; to (flash)
program1:	ld	bc,#0555
		ld	a,#AA
		ld	(bc),a
		ld	bc,#02AA
		ld	a,#55
		ld	(bc),a
		ld	bc,#0555
		ld	a,#A0
		ld	(bc),a
		ld	a,(de)			;read from ZX RAM
		ld	(hl),a			;write to FLASH
		ex	af,af'
		ld	bc,#300
program2:	ex	af,af'
		cp	(hl)
		jr	z,program_ok
		ex	af,af'
		dec	bc
		ld	a,b
		or	c
		jr	nz,program2

program_bad:	call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_pgm_nok		;text Progamming went bad
		call	print42
		call	inkey.ANYKEY
		jr	flash_exit

program_ok:	inc	hl
		inc	de
		ld	a,h
		cp	#40			;end of 16KB
		jr	nz,program1

		call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_pgm_ok		;text Progamming was OK
		call	print42
		call	dummy_loop
;verify
		call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_verifying 	;text Verifying
		call	print42

verify:		ld	hl,#c000
		ld	de,0
		ld	bc,#3fff
verify1:	ld	a,(de)
		cp	(hl)
		jr	nz,ver_error
		inc	de
		inc	hl
		dec	bc
		ld	a,b
		or	c
		jr	nz,verify1

		call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_ver_ok		;text Verify went successfully
		call	print42
		call	dummy_loop

flash_exit:	pop	af
		ld	bc,#713B
		out	(c),a			;back to previous machine
		ret

ver_error:	call	clear_stat_ln
		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_ver_nok		;text Verify ended with errors!
		call	print42
		call	inkey.ANYKEY
		jr	flash_exit

; Displays text
show_text:	ld	hl,#0202		; title label
		ld	(xy42.cursor),hl
		ld	hl,txt_title
		call	print42

		ld	hl,#B102
		ld	(xy42.cursor),hl
		ld	hl,txt_version		; version
		call	print42

		ld	hl,#B179
		ld	(xy42.cursor),hl
		ld	hl,txt_copyright	; copyright
		call	print42

		ld	hl,#0E02
		ld	(xy42.cursor),hl
		ld	hl,txt_ufirm		; boot
		call	print42

		ld	hl,#1602
		ld	(xy42.cursor),hl
		ld	hl,txt_diag		; diag ROM
		call	print42

		ld	hl,#1E02
		ld	(xy42.cursor),hl
		ld	hl,txt_esxdos		; ESXDOS
		call	print42

		ld	hl,#2602
		ld	(xy42.cursor),hl
		ld	hl,txt_easyhdd		; EasyHDD
		call	print42

		ld	hl,#2E02
		ld	(xy42.cursor),hl
		ld	hl,txt_bsrom		; BSROM
		call	print42

		ld	hl,#3602
		ld	(xy42.cursor),hl
		ld	hl,txt_bsdos		; BSDOS
		call	print42

		ld	hl,#3E02
		ld	(xy42.cursor),hl
		ld	hl,txt_patches		; patches
		call	print42

		ld	hl,#4602
		ld	(xy42.cursor),hl
		ld	hl,txt_nmi_1		; NMI menu 1
		call	print42

		ld	hl,#4E02
		ld	(xy42.cursor),hl
		ld	hl,txt_nmi_2		; NMI menu 2
		call	print42

		ld	hl,#5602
		ld	(xy42.cursor),hl
		ld	hl,txt_reserved0	; Reserved
		call	print42

		ld	hl,#5E02
		ld	(xy42.cursor),hl
		ld	hl,txt_devace		; DevastAce
		call	print42

		ld	hl,#6602
		ld	(xy42.cursor),hl
		ld	hl,txt_ubios		; BIOS
		call	print42

		ld	hl,#0E59
		ld	(xy42.cursor),hl
		ld	hl,txt_reserved1	; Reserved
		call	print42

		ld	hl,#1659
		ld	(xy42.cursor),hl
		ld	hl,txt_reserved2	; Reserved
		call	print42

		ld	hl,#1E59
		ld	(xy42.cursor),hl
		ld	hl,txt_reserved3	; Reserved
		call	print42

		ld	hl,#2659
		ld	(xy42.cursor),hl
		ld	hl,txt_wifi		; Wi-Fi
		call	print42

		ld	hl,#2E59
		ld	(xy42.cursor),hl
		ld	hl,txt_h04rom0		; H04 bank 0
		call	print42

		ld	hl,#3659
		ld	(xy42.cursor),hl
		ld	hl,txt_h04rom1		; H04 bank 1
		call	print42

		ld	hl,#3E59
		ld	(xy42.cursor),hl
		ld	hl,txt_h04rom2		; H04 bank 2
		call	print42

		ld	hl,#4659
		ld	(xy42.cursor),hl
		ld	hl,txt_h04rom3		; H04 bank 3
		call	print42

		ld	hl,#4E59
		ld	(xy42.cursor),hl
		ld	hl,txt_h05rom0		; H05 bank 0
		call	print42

		ld	hl,#5659
		ld	(xy42.cursor),hl
		ld	hl,txt_h05rom1		; H05 bank 1
		call	print42

		ld	hl,#5E59
		ld	(xy42.cursor),hl
		ld	hl,txt_h05rom2		; H05 bank 2
		call	print42

		ld	hl,#6659
		ld	(xy42.cursor),hl
		ld	hl,txt_h05rom3		; H05 bank 3
		call	print42

		ld	hl,#0EAF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom0		; Custom ROM 0
		call	print42

		ld	hl,#16AF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom1		; Custom ROM 1
		call	print42

		ld	hl,#1EAF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom2		; Custom ROM 2
		call	print42

		ld	hl,#26AF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom3		; Custom ROM 3
		call	print42

		ld	hl,#2EAF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom4		; Custom ROM 4
		call	print42

		ld	hl,#36AF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom5		; Custom ROM 5
		call	print42

		ld	hl,#3EAF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom6		; Custom ROM 6
		call	print42

		ld	hl,#46AF
		ld	(xy42.cursor),hl
		ld	hl,txt_crom7		; Custom ROM 7
		call	print42

		ld	hl,#4EAF
		ld	(xy42.cursor),hl
		ld	hl,txt_userapps0	; User Apps 0
		call	print42

		ld	hl,#56AF
		ld	(xy42.cursor),hl
		ld	hl,txt_userapps1	; User Apps 1
		call	print42

		ld	hl,#5EAF
		ld	(xy42.cursor),hl
		ld	hl,txt_userapps2	; User Apps 2
		call	print42

		ld	hl,#66AF
		ld	(xy42.cursor),hl
		ld	hl,txt_userapps3	; User Apps 3
		call	print42

		ld	hl,#7102
		ld	(xy42.cursor),hl
		ld	hl,txt_unodos		; UnoDOS
		call	print42

		ld	hl,#7159
		ld	(xy42.cursor),hl
		ld	hl,txt_fatware		; FATware
		call	print42

		ld	hl,#71AF
		ld	(xy42.cursor),hl
		ld	hl,txt_mdos		; MDOS
		call	print42

		ld	hl,#7902
		ld	(xy42.cursor),hl
		ld	hl,txt_tbios		; TBIOS
		call	print42

		ld	hl,#7959
		ld	(xy42.cursor),hl
		ld	hl,txt_demfir		; DEMFIR
		call	print42

		ld	hl,#79AF
		ld	(xy42.cursor),hl
		ld	hl,txt_plsdivide	; +divide
		call	print42

		ld	hl,#8102
		ld	(xy42.cursor),hl
		ld	hl,txt_cfdriver		; CFDriver
		call	print42

		ld	hl,#8C02
		ld	(xy42.cursor),hl
		ld	hl,txt_one_bank		; info text 1
		call	print42

		ld	hl,#9402
		ld	(xy42.cursor),hl
		ld	hl,txt_all_banks	; info text 2
		call	print42

		ld	hl,#A302
		ld	(xy42.cursor),hl
		ld	hl,txt_status		; label STATUS
		call	print42

		ld	hl,stat_ln_xy
		ld	(xy42.cursor),hl
		ld	hl,txt_action		; status text
		call	print42

		ret

; Draws frame
draw_frame:	call	draw.mkbod
		xor	a
		call	draw.over

		ld	bc,#0000
		ld	de,#00ff
		call	draw.line
		ld	bc,#00ff
		ld	de,#afff
		call	draw.line
		ld	bc,#afff
		ld	de,#af00
		call	draw.line
		ld	bc,#af00
		ld	de,#0000
		call	draw.line

		ld	bc,#0b00
		ld	de,#0bff
		call	draw.line

		ld	bc,#0d00
		ld	de,#0dff
		call	draw.line

		ld	bc,#6f00
		ld	de,#6fff
		call	draw.line

		ld	bc,#8A00
		ld	de,#8Aff
		call	draw.line

		ld	bc,#9D00
		ld	de,#9Dff
		call	draw.line

		ret

; Clears screen
clear_screen:	ld	hl,screen
		ld	de,screen+1
		ld	bc,#17ff
		xor	a
		ld	(hl),a
		ldir

		ld	hl,attrs
		ld	de,attrs+1
		ld	bc,#2ff
		ld	a,#07
		ld	(hl),a
		ldir
		ret

; 42-6x7 char print
print42:	ld	a,(hl)
		call	xy42.xy
		inc	hl
		jr	nz,print42
		ret

; DOWNHL
downhl:		inc	h
		ld	a,h
		and	7
		ret	nz
		ld	a,l
		add	a,32
		ld	l,a
		ld	a,h
		jr	c,downhl2
		sub	8
		ld	h,a
downhl2:	cp	88
		ret	c
		ld	hl,64
		ret

;Dummy loop
dummy_loop:	ld	hl,#afff
dumloop1:	dec	hl
		ld	a,h
		or	l
		jr	nz,dumloop1
		ret

; Includes
		include	"xy42.a80"		; 42 char print routine by Busy
		include	"draw.a80"		; draw routine by Busy
		include	"inkey.a80"		; inkey routine

; Data
ret_from_bas:	db	0
basic_line:	db	0
flash_bank:	db	0

txt_ufirm:	db	"0: Boot",0
txt_diag:	db	"1: DiagROM",0
txt_esxdos:	db	"2: ESXDOS",0
txt_unodos:	db	"@: UnoDOS",0
txt_fatware	db	"$: FATWare",0
txt_mdos	db	"%: MDOS3",0
txt_tbios	db	"&: TBIOS",0
txt_demfir	db	"+: DEMFIR",0
txt_plsdivide:	db	"-: +divide",0
txt_easyhdd:	db	"3: EasyHDD",0
txt_cfdriver:	db	"#: CFDriver",0
txt_bsrom:	db	"4: BSROM",0
txt_bsdos:	db	"5: BSDOS",0
txt_patches:	db	"6: Patches",0
txt_nmi_1:	db	"7: NMI menu 1",0
txt_nmi_2:	db	"8: NMI menu 2",0
txt_reserved0	db	"9: Reserved",0
txt_devace:	db	"A: DevastAce",0
txt_ubios:	db	"B: BIOS",0
txt_reserved1:	db	"C: Reserved",0
txt_reserved2:	db	"D: Reserved",0
txt_reserved3:	db	"E: Reserved",0
txt_wifi:	db	"F: Wi-Fi",0
txt_h04rom0	db	"G: H04 ROM 0",0
txt_h04rom1	db	"H: H04 ROM 1",0
txt_h04rom2	db	"I: H04 ROM 2",0
txt_h04rom3	db	"J: H04 ROM 3",0
txt_h05rom0	db	"K: H05 ROM 0",0
txt_h05rom1	db	"L: H05 ROM 1",0
txt_h05rom2	db	"M: H05 ROM 2",0
txt_h05rom3	db	"N: H05 ROM 3",0
txt_crom0	db	"O: Cust.ROM 0",0
txt_crom1	db	"P: Cust.ROM 1",0
txt_crom2	db	"Q: Cust.ROM 2",0
txt_crom3	db	"R: Cust.ROM 3",0
txt_crom4	db	"S: Derby++ b0",0
txt_crom5	db	"T: Derby++ b1",0
txt_crom6	db	"U: Derby++ b2",0
txt_crom7	db	"V: Derby++ b3",0
txt_userapps0:	db	"W: UserApps 0",0
txt_userapps1:	db	"X: UserApps 1",0
txt_userapps2:	db	"Y: UserApps 2",0
txt_userapps3:	db	"Z: UserApps 3",0

txt_copyright:	db	#7f,"z00m^SinDiKAT 04/2021",0
txt_title:	db	"       ReFlasher for MB03+ Ultimate",0
txt_version:	db	"Version: 1.5",0

txt_status:	db	"STATUS:",0
txt_action:	db	"Waiting for your action",0

txt_one_bank:	db	"Keys 0-Z = program single bank, ! to quit.",0
txt_all_banks:	db	"To program banks 0-Z at once, press *.",0

txt_flash_bank: db	"Programming bank "
key_store:	ds	1,#20
		db	0

txt_erasing:	db	"Erasing...",0
txt_verifying:	db	"Verifying...",0
txt_ver_ok:	db	"Verify was OK.",0
txt_ver_nok:	db	"Verify failed!!!",0
txt_pgm_ok:	db	"Programming was successful.",0
txt_pgm_nok:	db	"Programming failed!!!",0
txt_ers_nok:	db	"Erase failed!!!",0

txt_bad_key:	db	"Wrong key!",0
txt_loading:	db	"Loading binary",0
txt_quit:	db	"Exiting!",0
txt_any_key:	db	"Press any key.",0

		savebin "reflasher.bin",start,$-start
