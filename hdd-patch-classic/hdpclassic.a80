;HDD patch classic v1.64
;--------------------------------------
;based on HDD 2 MB02 v1.62 by  dr0n_K3L
;forked and sjasmized by  z00m^SinDiKAT
;--------------------------------------
;
; mode 000 - reads 2x one sector
; mode 001 - reads 2 sectors
; mode 010 - LBA mode reads 2 sectors
;
;DMA transfers
;Zilog DMA compatible
;diskimage capacity - 2MB
;diskimage format   - 128x8x2
;supports master & slave devices

;--------------------------------------
;changelog
;--------------------------------------
;v1.64 - fixed no verify patch
;
;v1.63 - fixed DMA sequence, sjasmized

;--------------------------------------

		device	zxspectrum48
		
		org	32768

;definitions
rom_bank:	equ	#60
dos_bank:	equ	#61
patch_bank:	equ	#62

dma_port:	equ	#0b

mem_port:	equ	#17

;HDD patch starts here
begin:		jp	install

;virtual disk table
vdt:		db	0		;master: sectors
		db	0		;master: heads
		db	0		;master: cylinders low
		db	0		;master: cylinders high

		db	0		;slave: sectors
		db	0		;slave:	heads
		db	0		;slave: cylinders low
		db	0		;slave: cylinders high

		db	0, 0, 0 ,0	;@0 - tape, don't change

		db	0, 0, 0, 0	;@1 - floppy 1, don't change for MB-02+
		db	0, 0, 0, 0	;@2 - floppy 2, don't change if two fdds are connected

		ds	1012		;table of virtual drives @3-@255
vdt_end:

;ATA ports DRON
;p_dat:		db	195		;#c3
;p_err:		db	199		;#c7
;p_hse:		db	203		;#cb
;p_nse:		db	207		;#cf
;p_cyl:		db	211		;#d3
;p_cyh:		db	215		;#d7
;p_hea:		db	219		;#db
;p_com:		db	223		;#df

;ATA ports PVL
p_dat:		db	163		;#a3
p_err:		db	167		;#a7
p_hse:		db	171		;#ab
p_nse:		db	175		;#af
p_cyl:		db	179		;#b3
p_cyh:		db	183		;#b7
p_hea:		db	187		;#bb
p_com:		db	191		;#bf

;ATA ports MB03
;p_dat:		db	195		;#c3
;p_err:		db	167		;#a7
;p_hse:		db	203		;#cb
;p_nse:		db	175		;#af
;p_cyl:		db	211		;#d3
;p_cyh:		db	183		;#b7
;p_hea:		db	219		;#db
;p_com:		db	191		;#bf

install:	di

		ld	hl,15616
		ld	de,40000
		ld	bc,768
		ldir			;font copied to memory

		ld	hl,vdt
		ld	de,tab
		ld	bc,vdt_end-vdt
		ldir			;move VDT into patch

		ld	a,dos_bank
		out	(mem_port),a	;dos_bank page in

		ld	hl,dos_14h
		ld	de,#14
		ld	bc,dos_14h_end-dos_14h
		ldir			;patch mods part1 moved to dos_bank

		ld	hl,dos_23h
		ld	de,#23
		ld	bc,dos_23h_end-dos_23h
		ldir			;patch mods part2 moved to dos_bank

		ld	hl,dos_3eh
		ld	de,#3e
		ld	bc,dos_3eh_end-dos_3eh
		ldir			;patch mods part3 moved to dos_bank

		ld	hl,dos_90h		
		ld	de,#90
		ld	bc,dos_90h_end-dos_90h
		ldir			;patch mods part4 moved to dos_bank

		ld	a,#21
		ld	(#13ca),a
		ld	a,#c3
		ld	(#1447),a	;set no_verify patch

		ld	a,patch_bank
		out	(mem_port),a	;patch_bank page in

		ld	hl,patch_00h
		ld	de,0
		ld	bc,patch_00h_end-patch_00h
		ldir			;patch body part1 moved to patch_bank

		ld	hl,patch_90h
		ld	de,#90
		ld	bc,patch_90h_end-patch_90h
		ldir			;patch body part2 moved to patch_bank

		ld	hl,#c9fb	; ei:ret to address #38 in patch_bank
		ld	(#38),hl

		ld	a,(p_dat)	;set ATA ports in patch code
		ld	(p1),a
		ld	(p11),a
		ld	a,(p_err)
		ld	(p2+1),a
		ld	a,(p_hse)
		ld	(p3+1),a
		ld	(p31+1),a
		ld	(p32+1),a
		ld	(p33+1),a
		ld	a,(p_nse)
		ld	(p4+1),a
		ld	(p41+1),a
		ld	(p42+1),a
		ld	(p43+1),a
		ld	a,(p_cyl)
		ld	(p5+1),a
		ld	(p51+1),a
		ld	(p52+1),a
		ld	(p53+1),a
		ld	a,(p_cyh)
		ld	(p6+1),a
		ld	(p61+1),a
		ld	(p62+1),a
		ld	(p63+1),a
		ld	a,(p_hea)
		ld	(p7+1),a
		ld	(p71+1),a
		ld	(p72+1),a
		ld	(p73+1),a
		ld	a,(p_com)
		ld	(p8+1),a
		ld	(p81+1),a
		ld	(p82+1),a
		ld	(p83+1),a
		ld	(p84+1),a
		ld	(p85+1),a


		ld	hl,40000
		ld	de,15616
		ld	bc,768
		ldir			;font copied to patch_bank

		ld	a,rom_bank	;rom_bank page in
		out	(mem_port),a
		ei
		ret

;------------------------------------
;------------------------------------
;mod at #14 in dos_bank
;input: a=dos_bank

dos_14h:	
		disp	#14

		ld	(hl),b		;write byte in dos_bank
		inc	a
		out	(mem_port),a	;patch_bank page in
		jp	adr144d

dos_1bh:	ld	a,patch_bank	;route to patch_bank
		out	(mem_port),a
		ret

		ent
dos_14h_end:

;------------------------------------
;------------------------------------
;mod at #23 in dos_bank
;input: a=dos_bank

dos_23h:
		disp	#23

		out	(c),b		;start DMA transfer
		inc	a
		out	(mem_port),a	;patch_bank page in

		ent
dos_23h_end:

;-----------------------------------
;-----------------------------------
;mod at #3e in dos_bank
dos_3eh:
		disp	#3e

		ld	c,a		;is verify needed?
		ld	a,(#03ef)
		cp	5
		ld	a,c
		ret	nc
		jp	#1463

		ent
dos_3eh_end:

;------------------------------------
;------------------------------------
;mod at #90 in dos_bank

dos_90h:
		disp	#90

adr144d:	push	hl
		ld	hl,255
		ld	(hl),a
		dec	hl
		ex	(sp),hl

		cp	12
		jr	c,skip1
		cp	15
		jr	c,sluz1214

skip1:		cp	16
		jr	z,setmlt
		or	a
		ret	z
		cp	15
		ret	nc
act:		ret

		inc	sp
		inc	sp

aaa:		cp	4
		jr	c,loop12
		cp	6
		jr	c,rdwrsec
loop12:		cp	7
		jr	z,rdwrsec
		xor	a
		ret


rdwrsec:	push	hl
		push	de
		ld	b,a
		ld	(sp_st+1),sp
		ld	sp,128
		call	dos_1bh
sp_st:		ld	sp,0
		push	bc
rut:		call	nic
		pop	af
		pop	de
		pop	hl
nic:		ret


setmlt:		ld	a,h
		or	l
		jr	nz,loop14
		ld	hl,nic
loop14:		ld	(rut+1),hl
		ret


sluz1214:	push	de
		push	hl
		ld	b,a
		ld	(sp_st+1),sp
		ld	sp,128
		call	dos_1bh
		ld	sp,(sp_st+1)
		ld	a,b
		pop	hl
		or	a
		jr	nz,no_nfo
		inc	sp
		inc	sp
		push	de
no_nfo:		pop	de
		cp	255
		ret	z		;nz=ret immediately, z=pass
pryc:		inc	sp
		inc	sp
		ret

		nop
		nop

a1_254:		ld	a,#55

;address #100 should be here
		if	$>#100
		display "!!!! Address #100 overflow in dos_bank by ",/D,$-#100," bytes !!!!"
		endif

		ent
dos_90h_end:

;------------------------------------
;------------------------------------
;hooks at #0 in patch_bank

patch_00h:
		disp	0

		di
		xor	a
		ld	de,65535
patch_05h:	jp	patch_05h
		db	"HddDrive"

patch_10h:	ld	a,dos_bank
		out	(mem_port),a
patch_14h:	ld	(hl),b
		inc	a
		out	(mem_port),a
		ret
		nop
		nop
patch_1bh:	ld	a,dos_bank	;#1b - route to dos_bank
		out	(mem_port),a
		jr	adr144p

dma_start:	out	(mem_port),a	;#21 - route to dma_start, input must be: a=dos_bank, bc=dma_port
		out	(c),b
		inc	a
		out	(mem_port),a
		ret

		ent
patch_00h_end:

;------------------------------------
;------------------------------------
;patch body at #90 in patch_bank

patch_90h:
		disp	#90

adr144p:	jp	preskoc

		ent

tab:
		disp	#93
;primary
m_sec1:		db	0
m_hea1:		db	0
m_cyl1:		dw	0

;secondary
m_sec2:		db	0
m_hea2:		db	0
m_cyl2:		dw	0


tab_drv:	ds	1024

preskoc:	push	hl
		ld	hl,rett
		ex	(sp),hl

		ld	a,b

		cp	12
		jr	z,aktive1
		cp	13
		jr	z,pasive1
		cp	14
		jr	z,info1

		cp	4
set_rdm:	jp	z,rd_sec0
		cp	5
set_wrm1:	jp	z,wr_sec0
		cp	7
		jp	z,wr_trk
		xor	a
		ret

rett:		ld	b,a
		jp	patch_1bh

info1:		ld	a,e
		call	tst_drv
		ld	a,255
		ret	z
		ld	de,128*256+3
		xor	a
		ret

pasive1:	ld	a,201
		ld	hl,act
		ld	b,a
		rst	16
		ld	a,255
		ret

aktive1:	call	pasive1
		ld	a,e
		call	tst_drv
		ld	a,255
		ret	z
		xor	a
		ld	hl,act
		ld	b,a
		rst	16
		ld	a,2
		ret

wr_trk:		ld	a,e
		and	128
		ld	e,a
		xor	a
wtrk1:
		inc	e
		push	de
		push	hl
		push	af
set_wrm2:	call	wr_sec0
		pop	af
		pop	hl
		ld	de,1024
		add	hl,de
		pop	de
		inc	a
		cp	9		;num of sectors -1
		jr	nz,wtrk1
		ret

;------------------------------------
;counts logical number of sector
;hl is preserved
;result is passed directly to prepoc

sect_num:	push	hl
		ld	l,d
		ld	h,0
		add	hl,hl
		add	hl,hl
		add	hl,hl
		add	hl,hl		;*16
		ld	a,e
		dec	a
		and	%00000111
		bit	7,e
		jr	z,rds1
		or	%00001000
rds1:		or	l
		ld	l,a		;hl = log. number of sector, counts from 0
		add	hl,hl		;*2 - sector is 512 bytes long, we need two sectors
		ld	(prepoc+1),hl
		ld	a,h
		pop	hl
		and	%11110000
		ret	z

		ld	a,%00010000	;seek error
		or	a
		ret


;------------------------------------
;counts logical number of sector of 
;disk image to corresponding physical
;cyl,sec,hea on HDD/CF

;hl = logical number of sector

prepoc:		ld	hl,0

low24:		ld	de,0
		add	hl,de
hig24:		ld	de,0
		jr	nc,prep1
		inc	de
prep1:
m_sec:		ld	a,0
		call	div248
		ld	e,d
		ld	d,0
		push	de		;de -> sec
m_hea:		ld	a,0
		ld	e,a
		ld	d,0
		call	div
		push	de		;de -> heads
m_cyl:		ld	de,0
		call	div		;de -> cyl
		pop	hl
		ld	b,l
		pop	hl
		ld	c,l
		inc	c
		ret

prep_lba:	ld	hl,(prepoc+1)
		ld	de,(low24+1)
		add	hl,de
		ld	de,(hig24+1)
		jr	nc,prep2
		inc	de

;b - head (p_hea)
;c - sector (p_nse)
;de - cylinder	(e - p_cyl, d - p_cyh)

prep2:		ld	b,d
		ld	d,e
		ld	e,h
		ld	c,l
		ret


;------------------------------------
;---------- generic 000 -------------
;------------------------------------

rd_sec0:	call	sect_num
		ret	nz

		call	rdd
		ret	nz
		ld	de,(prepoc+1)
		inc	de
		ld	(prepoc+1),de
		call	rdd
		ret			;if ok, zero flag is returned

rdd:		push	hl
		call	prepoc
		pop	hl
		call	read0
		ret

wr_sec0:
wr_prot:	ld	a,0
		or	a
		ret	nz

		call	sect_num
		ret	nz

		call	wrr
		ret	nz
		ld	de,(prepoc+1)
		inc	de
		ld	(prepoc+1),de
		call	wrr
		ret			;if ok, zero flag is returned

wrr:		push	hl
		call	prepoc
		pop	hl
		call	write0
		ret

read0:		call	tst_bsy
		jp	nz,error

		ld	a,b
hea_rd0:	or	%10100000
p7:		out	(0),a		;number of head

		ld	a,1
p3:		out	(0),a		;number of sectors

		ld	a,c
p4:		out	(0),a		;number of sector (starts from 1)

		ld	a,e
p5:		out	(0),a
		ld	a,d
p6:		out	(0),a		;number of cylinder

		ld	a,#20		;ATA command, read sector(s)
p8:		out	(0),a

		call	tst_bsy
		jp	nz,error

		call	rd_512		;works as inir (hl+512)

		call	tst_err
		jp	nz,error

		xor	a
		ret

write0:		call	tst_bsy
		jp	nz,error

		ld	a,b
hea_wr0:	or	%10100000
p71:		out	(0),a		;number of head

		ld	a,1
p31:		out	(0),a		;number of sectors
		ld	a,c
p41:		out	(0),a		;number of sector (starts from 1)
		ld	a,e
p51:		out	(0),a
		ld	a,d
p61:		out	(0),a		;number of cylinder

		ld	a,#30		;ATA command, write sector(s)
p81:		out	(0),a

		call	tst_bsy
		jp	nz,error

		call	wr_512

		call	tst_bsy
		jp	nz,error
		call	tst_err
		jp	nz,error

		xor	a
		ret

;------------------------------------
;----- end of generic 000 -----------
;------------------------------------



;------------------------------------
;--------- generic+ 001 -------------
;------------------------------------

rd_sec1:	call	sect_num
		ret	nz
		push	hl
		call	prepoc
		pop	hl
		call	read1
		ret

wr_sec1:	ld	a,(wr_prot+1)
		or	a
		ret	nz

		call	sect_num
		ret	nz
		push	hl
		call	prepoc
		pop	hl
		call	write1
		ret

read1:		call	tst_bsy
		jp	nz,error

		ld	a,b
hea_rd1:	or	%10100000
p72:		out	(0),a		;number of head

		ld	a,2
p32:		out	(0),a		;number of sectors

		ld	a,c
p42:		out	(0),a		;number of sector (starts from 1)

		ld	a,e
p52:		out	(0),a
		ld	a,d
p62:		out	(0),a		;number of cylinder

		ld	a,#20		;ATA command, read sector(s)
p82:		out	(0),a

		call	tst_bsy
		jr	nz,error

		call	rd_512

		call	tst_err
		jr	nz,error

		call	tst_bsy
		jr	nz,error

		call	rd_512

		call	tst_err
		jr	nz,error

		xor	a
		ret

write1:		call	tst_bsy
		jr	nz,error

		ld	a,b
hea_wr1:	or	%10100000
p73:		out	(0),a		;number of head

		ld	a,2
p33:		out	(0),a		;number of sectors
		ld	a,c
p43:		out	(0),a		;number of sector (starts from 1)
		ld	a,e
p53:		out	(0),a
		ld	a,d
p63:		out	(0),a		;number of cylinder

		ld	a,#30		;ATA command, write sector(s)
p83:		out	(0),a

		call	tst_bsy
		jr	nz,error

		call	wr_512

		call	tst_bsy
		jr	nz,error
		call	tst_err
		jr	nz,error

		call	wr_512

		call	tst_bsy
		jr	nz,error
		call	tst_err
		jr	nz,error

		xor	a
		ret

;------------------------------------
;----- end of generic+ 001 ----------
;------------------------------------


;------------------------------------
;-------- LBA mode 010 --------------
;------------------------------------

rd_sec2:	call	sect_num
		ret	nz

		push	hl
		call	prep_lba
		pop	hl

		call	read1
		ret

wr_sec2:	ld	a,(wr_prot+1)
		or	a
		ret	nz

		call	sect_num
		ret	nz

		push	hl
		call	prep_lba
		pop	hl

		call	write1
		ret

;------------------------------------
;---- end of LBA mode 010 -----------
;------------------------------------


;------------------------------------
;------ rest of patch code ----------
;------------------------------------

error:		cp	255
		jr	nz,err1
		ld	a,1
		ret
err1:
		and	%01010011
		jr	z,err2
		ld	a,8
		ret
err2:
		ld	a,128
		ret


tst_bsy:	push	hl
		push	bc
		ld	hl,0

tst1:
		dec	hl
		ld	a,l
		or	h
		jr	z,tout1
p84:		in	a,(0)
		inc	a
		jr	z,p84
		dec	a
		bit	7,a
		jr	nz,tst1
		pop	bc
		pop	hl
		ret
tout1:
		ld	a,255
		or	a
		pop	bc
		pop	hl
		ret

tst_err:
p85:		in	a,(0)
		inc	a
		jr	z,p85
		dec	a
		and	1
		ret	z
p2:		in	a,(0)
		ret

rd_512:		ld	(dma_adr1),hl
		push	hl
		ld	hl,dma_in
		ld	bc,((dma_in_end-dma_in)*256)+dma_port
		otir
		ld	a,dos_bank
		ld	b,#87
		call	dma_start	;start DMA transfer
		pop	hl
		ld	bc,512
		add	hl,bc
		ret

dma_in:		db	#c3		;WR6-reset
		db	%01111101	;WR0 PA->PB, transfer
p1:		dw	0		;source port
		dw	511		;block size
		db	%00101100	;WR1 PA-port, fixed
		db	%00010000	;WR2 PB-memory, increment
		db	%10101101	;WR4 continuous
dma_adr1:	dw	0		;destination memory
		db	%10010010	;WR5 ready low,CE/WAIT,stop on end of block
		db	#cf		;WR6 load
		db	#b3		;WR6 force ready
dma_in_end:

wr_512:		ld	(dma_adr2),hl
		push	hl
		ld	hl,dma_out
		ld	bc,((dma_out_end-dma_out)*256)+dma_port
		ld	a,dos_bank
		otir
		ld	a,dos_bank
		ld	b,#87
		call	dma_start
		pop	hl
		ld	bc,512
		add	hl,bc
		ret

dma_out:	db	#c3		;WR6-reset
		db	%00000001	;WR0-Temporarily declare Port B as source in WR0 (bit 2 = 0)
        	db	%00010100	;WR1-PA memory,increment
        	db	%00101000	;WR2-PB io, fixed
        	db	%10000000	;WR3
        	db	%10101101	;WR4-Write Port B (fixed destination) address to WR4.
p11:		dw	0		;port
        	db	#cf		;WR6-load
        	db	%01111101	;WR0-transfer,portA,block length
dma_adr2:	dw	0		;memory
        	dw	511		;block size
        	db	%10010010	;WR5-stop on end,/CE/WAIT,Ready low
        	db	#cf		;WR6-load
        	db	#b3		;WR6-force ready
dma_out_end:

tst_drv:	ld	l,a
		ld	h,0
		add	hl,hl
		add	hl,hl
		ld	de,tab_drv
		add	hl,de

		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		push	de
		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		pop	hl

		ld	a,d
		rrca
		rrca
		and	%01000000
		ld	(wr_prot+1),a

		ld	a,d
		rrca
		and	%00000111
		jr	z,mode0
		dec	a
		jr	z,mode1
		dec	a
		jr	z,mode2
		jr	mode3

mode0:		ld	a,d
		or	%10100000
		and	%10110000		;LBA no way
		ld	(hea_wr0+1),a
		ld	(hea_rd0+1),a

		ld	bc,rd_sec0
		ld	(set_rdm+1),bc
		ld	bc,wr_sec0
		ld	(set_wrm1+1),bc
		ld	(set_wrm2+1),bc

		jr	mst_slv			;hl & de contains data!

mode1:		ld	a,d
		or	%10100000
		and	%10110000		;LBA no way
		ld	(hea_wr1+1),a
		ld	(hea_rd1+1),a

		ld	bc,rd_sec1
		ld	(set_rdm+1),bc
		ld	bc,wr_sec1
		ld	(set_wrm1+1),bc
		ld	(set_wrm2+1),bc

		jr	mst_slv			;hl & de contains data!

mode2:		ld	a,d
		or	%11100000		;100% LBA
		and	%11110000
		ld	(hea_wr1+1),a
		ld	(hea_rd1+1),a

		ld	bc,rd_sec2
		ld	(set_rdm+1),bc
		ld	bc,wr_sec2
		ld	(set_wrm1+1),bc
		ld	(set_wrm2+1),bc

		jr	lba_mod			;hl & de contains data!

mode3:
mst_slv:	and	%00010000
		jr	z,prim
		ld	a,(m_sec2)
		ld	(m_sec+1),a
		ld	a,(m_hea2)
		ld	(m_hea+1),a
		ld	bc,(m_cyl2)
		ld	(m_cyl+1),bc
		jr	slave

prim:		ld	a,(m_sec1)
		ld	(m_sec+1),a
		ld	a,(m_hea1)
		ld	(m_hea+1),a
		ld	bc,(m_cyl1)
		ld	(m_cyl+1),bc
slave:
lba_mod:	ld	d,0
		ld	(low24+1),hl
		ld	(hig24+1),de

		ld	a,e
		or	h
		or	l
		ret

div:		ld	a,h
		ld	c,l
		ld	hl,0
		ld	b,16
div2:		sll	c
		rla
		adc	hl,hl
		sbc	hl,de
		jr	nc,div3
		add	hl,de
		dec	c
div3:		djnz	div2
		ex	de,hl
		ld	h,a
		ld	l,c
		ret

div248:		push	ix
		ld	bc,0
		ld	d,0
		ld	lx,a
		ld	hx,24
div2481:	sll	l
		rl	h
		rl	e
		rl	d
		rl	c
		rl	b

		ld	a,d			;adc bcd,bcd
		sbc	a,lx
		ld	d,a
		jp	nc,divok1
		dec	c
		jp	p,divok1
		dec	b
divok1:		jp	p,divok3		;sbc bcd,lx

		add	a,lx
		ld	d,a
		jp	nc,divok2
		inc	c
		jp	nz,divok2
		inc	b
divok2:		dec	l
divok3:		dec	hx			;add bcd,lx
		jp	nz,div2481

		pop	ix
		ret

		ent
patch_90h_end:
		savebin "hdpclassic.bin",begin,$-begin
		