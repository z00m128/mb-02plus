;====================================
;EPROM/EEPROM/FLASH booter for MB-02+
;      with fixed DMA sequence
;    by z00m^TCG^SinDiKAT 02/2019
;      formatted for SjASMPlus
;====================================

		OUTPUT "mb02boot.rom"

version:	equ	#04

;----------
;MB02 PORTS

RTC:		equ	#03
FDC:		equ	#0F
DMA:		equ	#0B
MOT:		equ	#13
REZ:		equ	#33
FDS:		equ	#4F
FDD:		equ	#6F

;-----------------
;other definitions

ULA:		equ	#FE
BootSector:	equ	#8000
VideoRAM:	equ	#4000	

;------------
;Main program

		org	#0000

Start:		di
		ld	a,#D0			; FDC command - ForceInterrupt
		out	(FDC),a			; reset FDC
		ld	a,#C3			; DMA command - R6: Reset
		out	(DMA),a			; reset DMA
		xor	a
		out	(MOT),a			; stop all floppy motors and unselect any floppy drive

		out	(ULA),a			; border 0

		ld	hl,#4000		; clear screen
		ld	de,#4001
		ld 	bc,#1AFF
		ld	(hl),l
		ldir

		ld	hl,#5800
		ld	de,#5801
		ld	bc,#2FF
		ld	(hl),%00000111		; paper 0, ink 7
		ldir

		ld	sp,#5FFF		; stack to RAM

StartupMessage: ld	hl,MsgStartup0		; print informations
		ld	de,VideoRAM
		call	Print

		ld	hl,MsgStartup1
		ld	de,VideoRAM+#20
		call	Print

		ld	hl,MsgStartup2
		ld	de,VideoRAM+#40
		call	Print

		ld	hl,MsgStartup3
		ld	de,VideoRAM+#60
		call	Print

		ld	hl,MsgStartup4
		ld	de,VideoRAM+#8*#100+#40
		call	Print

		ld	hl,MsgStartup5
		ld	de,VideoRAM+#10*#100+#E0
		call	Print		

Boot:		;call	TestRTC
		;jr 	nz,NoRTC
		
		call	ReadRTC
		
		ld	hl,TimeString
		ld	de,VideoRAM+#10*#100+#AC
		call	Print
		
NoRTC:		ld	e,%00000100
		ld	a,#D0			; FDC command - ForceInterrupt
		out	(FDC),a			; reset FDC
		ld	(BootSector),a		; clear BSDOS boot sector ID byte
		ld	a,#C3			; DMA command - R6: Reset
		out	(DMA),a			; reset DMA

HDorDD:		ld	a,0			; default if HD
		xor	1			; toggle HDD/DD
		ld	(HDorDD+1),a
		out	(REZ),a			; set HD or DD
		ld	a,3			; select drive0 and start motor0
		out	(MOT),a
		out	(FDC),a			; FDC command - track0

FloppyReady:	in	a,(MOT)			; is floppy drive ready?
		and	e
		jr	z,FloppyReady
		in	a,(FDC)			; FDC command - read byte
		and	e
		jr	z,Boot			; if head head is not on Track0 try again

		ld	a,1
		out	(FDS),a			; FDC set sector reg to 1

		ld	bc,DMASeqLen+DMA	; DMA sequence - b:length, c:DMA port address
		ld	hl,DMASequence
		otir				; initialise DMA

		ld	a,#88
		out	(FDC),a			; FDC command - read sector

FloppyReady2:	in	a,(MOT)			; is floppy drive ready?
		and	e
		jr	z,FloppyReady2
		in	a,(FDC)			; FDC command - read byte
		and	#1C
		jr	nz,Boot			; try again if some read error occured
		ld	a,(BootSector)
		cp	#18			; check	BSDOS boot sector ID byte
		jr	nz,Boot			; try again if it's wrong

BootEnd:	ld	a,#D0			; FDC command - ForceInterrupt
		out	(FDC),a			; reset FDC
		ld	a,#C3			; DMA command - WR6: Reset
		out	(DMA),a			; reset DMA
		xor	a
		out	(MOT),a			; stop all motors and unselect any floppy drive

		ld	hl,MsgBootEnd0		; print "Booting..." message
		ld	de,VideoRAM+#8*#100+#40
		call	Print

		ld	de,#FFFF		; dummy pause for about 1 sec, so user can read the message
DummyLoop:	dec	de
		ld	a,d
		or	e
		jr	nz,DummyLoop

		jp	BootSector		; Jump to the boot sector

DMASequence:	db	#C3			; R6: reset DMA
		db	#79			; R0: DMA transfer PortB->PortA
		dw	BootSector		; destination address
		dw 	#3FF			; size of data buffer
		db	#14			; R1: PortA - memory, incremented, default timing
		db	#28			; R2: PortB - I/O, fixed, default timing
		db	#80			; R3: disable DMA, no interrupt
		db	#8D			; R4: byte mode, no interrupt, no pulse control
		dw	FDD			; source port address (FDD)
		db	#92			; R5: ready active LOW, CE/WAIT, stop on end of block
		db	#CF			; R6: load
		db	#01			; R0: DMA transfer rd:PortB->PortA, wr:PortA->PortB
		db	#CF			; R6: load
		db	#87			; R6: enable DMA

; Old DMA sequence which works only with UA858D clone
;DMASequence:	db	#C3			; R6: reset DMA
;		db	#C7			; R6: reset PortA timing
;		db	#CB			; R6: reset PortB timing
;		db	#79			; R0: DMA transfer PortB->PortA
;		dw	BootSector		; destination address
;		dw	#3FF			; size of data buffer
;		db	#14			; R1: PortA - memory, incremented, default timing
;		db	#28			; R2: PortB - I/O, fixed, default timing
;		db	#C0			; R3: enable DMA (this is wrong - DMA cannot be enabled before full initializing.)
;		db	#8D			; R4: byte mode, no interrupt, no pulse control
;		dw	FDD			; source port address
;		db	#92			; R5: ready active LOW, CE/WAIT, stop on end of block
;		db	#CF			; R6: load
;		db	#87			; R6: enable DMA

DMASeqCount:	equ	$-DMASequence
DMASeqLen:	equ	DMASeqCount*#100

MsgStartup0:	dc	"           -----------------"
MsgStartup1:	dc	"           MB-02+ Bootloader"
MsgStartup2:	dc	"              version: 04"
MsgStartup3:	dc	"           -----------------"		
MsgStartup4:	dc	"Please insert the boot disk into drive 1!"
MsgStartup5:	dc	"      (c)2018 z00m / TCG / SinDiKAT"

MsgBootEnd0:	dc	"Booting...                               "				

;------------------------------------
; Test if RTC is present by Busy Soft

TestRTC:	ld	bc,#0e*#100+RTC
		ld	e,#50
tstrtc:		out     (c),e
		in      a,(c)
		ld      d,a
		and     #0f
		or      #50
		xor     e
		ret	nz
		inc     e
		ld      a,e
		and     #0f
		jr      nz,tstrtc
		ret

;-------------------------------
; Read time from RTC
; values are converted to
; characters separated by ':'
; last character is inverted

ReadRTC		ld	hl,TimeString		; buffer for string
		ld	bc,#05*#100+RTC		; select 5th register of RTC (tens of hours)
		ld	de,%0000011100001111	; masks for tens (d) and ones (e)
		in	a,(c)
		and	d
		or	%00110000		; make number character from value
		ld	(hl),a			; tens of hours
		inc	l
		dec	b
		in	a,(c)
		and	e
		or	%00110000
		ld	(hl),a			; ones of hours
		inc	l
		ld	a,':'
		ld	(hl),a			; separator
		inc	l
		dec	b
		in	a,(c)
		and	d
		or	%00110000
		ld	(hl),a			; tens of minutes
		inc	l
		dec	b
		in	a,(c)
		and	e
		or	%00110000
		ld	(hl),a			; ones of minutes
		inc	l
		ld	a,':'
		ld	(hl),a			; separator
		inc	l
		dec	b
		in	a,(c)
		and	d
		or	%00110000
		ld	(hl),a			; tens of seconds
		inc	l
		dec	b
		in	a,(c)
		and	e
		or	%10110000
		ld	(hl),a			; ones of seconds
		ret
		

;---------------------------------------------------------
;6-bit text print (42 columns) by MTB (c)1994 @ ZXM 5/1994
;simplification, bugfix and sjasmplus formatting by z00m/SinDiKAT (c)2016
;input: hl=text address, de=print position

Print:		ld	(pos),de
		xor	a
		ld	(roll),a	

print1:		push	hl
		ld	a,(hl)
		and	127
		call	ascii
		ld	a,(roll)
		inc	a
		cp	1
		call	z,print2
		cp	2
		call	z,print2
		cp	4
		jr	nz,print3
		ld	a,0
		call	print2
print3:		ld	(roll),a
		pop	hl
		bit	7,(hl)
		inc	hl
		ret	nz
		jr	print1

print2:		ld	hl,(pos)
		inc	hl
		ld	(pos),hl
		ret

ascii:		ld	bc,MsgFont
		push	bc
		sub	32
		ld	e,a
		ld	d,0
		ld	b,8
		ld	hl,0
x8:		add	hl,de
		djnz	x8
		pop	bc
		add	hl,bc
		ld	de,(pos)
		ex	de,hl
asci0:		ld	a,(roll)
		cp	3
		jr	z,roll3
		cp	2
		jr	z,roll2
		cp	1
		jr	z,roll1
roll0:		call	asci1
		ret
 
roll1:		ld	b,8
rol1_1:		ld	a,(de)
		sla	a
		ld	c,0
		rl	c
		sla	a
		rl	c
		push	bc
		call	asci2
		pop	bc
		inc	de
		djnz	rol1_1
		ret
 
roll2:		ld	b,8
rol2_1:		ld	a,(de)
		sla	a
		ld	c,0
		rl	c
		sla	a
		rl	c
		sla	a
		rl	c
		sla	a
		rl	c
		push	bc
		call	asci2
		pop	bc
		inc	de
		djnz	rol2_1
		ret
 
roll3:		ld	b,8
rol3_1:		ld	a,(de)
		srl	a
		srl	a
		push	bc
		call	asci3
		pop	bc
		inc	de
		djnz	rol3_1
		ret
 
asci1:		ld	b,8
asc1:		ld	a,(de)
		ld	(hl),a
		inc	de
		call	downhl
		djnz	asc1
		ret
 
asci2:		ld	(hl),a
		ld	a,c
		dec	hl
		or	(hl)
		ld	(hl),a
		inc	hl
		call	downhl
		ret
 
asci3:		or	(hl)
		ld	(hl),a
 
downhl:		inc	h
		ld	a,h
		and	7
		ret	nz
		ld	a,l
		add	a,32
		ld	l,a
		ld	a,h
		jr	c,down2
		sub	8
		ld	h,a
down2:		cp	88
		ret	c
		ld	hl,64
		ret
		
;5-bit font for messages
MsgFont:	db	#00, #00, #00, #00, #00, #00, #00, #00
		db	#00, #20, #20, #20, #20, #00, #20, #00
		db	#00, #50, #50, #00, #00, #00, #00, #00
		db	#00, #50, #F8, #50, #50, #F8, #50, #00
		db	#00, #20, #F8, #A0, #F8, #28, #F8, #20
		db	#00, #40, #A8, #50, #20, #50, #A8, #10
		db	#00, #20, #50, #20, #68, #90, #68, #00
		db	#00, #10, #20, #00, #00, #00, #00, #00
		db	#00, #08, #10, #10, #10, #10, #08, #00
		db	#00, #40, #20, #20, #20, #20, #40, #00
		db	#00, #00, #50, #20, #F8, #20, #50, #00
		db	#00, #00, #20, #20, #F8, #20, #20, #00
		db	#00, #00, #00, #00, #00, #10, #10, #20
		db	#00, #00, #00, #00, #78, #00, #00, #00
		db	#00, #00, #00, #00, #00, #30, #30, #00
		db	#00, #00, #08, #10, #20, #40, #80, #00
		db	#00, #70, #98, #A8, #A8, #C8, #70, #00
		db	#00, #60, #A0, #20, #20, #20, #F8, #00
		db	#00, #70, #88, #08, #70, #80, #F8, #00
		db	#00, #70, #88, #30, #08, #88, #70, #00
		db	#00, #10, #30, #50, #90, #F8, #10, #00
		db	#00, #F8, #80, #F0, #08, #88, #70, #00
		db	#00, #70, #80, #F0, #88, #88, #70, #00
		db	#00, #F8, #08, #10, #20, #40, #40, #00
		db	#00, #70, #88, #70, #88, #88, #70, #00
		db	#00, #70, #88, #88, #78, #08, #70, #00
		db	#00, #00, #00, #20, #00, #00, #20, #00
		db	#00, #00, #20, #00, #00, #20, #20, #40
		db	#00, #00, #08, #10, #20, #10, #08, #00
		db	#00, #00, #00, #78, #00, #78, #00, #00
		db	#00, #00, #20, #10, #08, #10, #20, #00
		db	#00, #70, #88, #10, #20, #00, #20, #00
		db	#00, #70, #08, #68, #A8, #A8, #70, #00
		db	#00, #70, #88, #88, #F8, #88, #88, #00
		db	#00, #F0, #88, #F0, #88, #88, #F0, #00
		db	#00, #70, #88, #80, #80, #88, #70, #00
		db	#00, #E0, #90, #88, #88, #90, #E0, #00
		db	#00, #F8, #80, #F0, #80, #80, #F8, #00
		db	#00, #F8, #80, #F0, #80, #80, #80, #00
		db	#00, #70, #88, #80, #B8, #88, #70, #00
		db	#00, #88, #88, #F8, #88, #88, #88, #00
		db	#00, #F8, #20, #20, #20, #20, #F8, #00
		db	#00, #08, #08, #08, #88, #88, #70, #00
		db	#00, #90, #A0, #C0, #A0, #90, #88, #00
		db	#00, #80, #80, #80, #80, #80, #F8, #00
		db	#00, #88, #D8, #A8, #88, #88, #88, #00
		db	#00, #88, #C8, #A8, #98, #88, #88, #00
		db	#00, #70, #88, #88, #88, #88, #70, #00
		db	#00, #F0, #88, #88, #F0, #80, #80, #00
		db	#00, #70, #88, #88, #A8, #98, #70, #00
		db	#00, #F0, #88, #88, #F0, #90, #88, #00
		db	#00, #70, #80, #70, #08, #88, #70, #00
		db	#00, #F8, #20, #20, #20, #20, #20, #00
		db	#00, #88, #88, #88, #88, #88, #70, #00
		db	#00, #88, #88, #88, #88, #50, #20, #00
		db	#00, #88, #88, #88, #88, #A8, #50, #00
		db	#00, #88, #50, #20, #20, #50, #88, #00
		db	#00, #88, #50, #20, #20, #20, #20, #00
		db	#00, #F8, #08, #30, #40, #80, #F8, #00
		db	#00, #38, #20, #20, #20, #20, #38, #00
		db	#00, #00, #80, #40, #20, #10, #08, #00
		db	#00, #70, #10, #10, #10, #10, #70, #00
		db	#00, #20, #70, #A8, #20, #20, #20, #00
		db	#00, #00, #00, #00, #00, #00, #00, #FC
		db	#00, #30, #48, #E0, #40, #40, #F8, #00
		db	#00, #00, #70, #08, #78, #88, #78, #00
		db	#00, #80, #80, #F0, #88, #88, #F0, #00
		db	#00, #00, #38, #40, #40, #40, #38, #00
		db	#00, #08, #08, #78, #88, #88, #78, #00
		db	#00, #00, #70, #88, #F0, #80, #78, #00
		db	#00, #30, #40, #60, #40, #40, #40, #00
		db	#00, #00, #78, #88, #88, #78, #08, #70
		db	#00, #80, #80, #F0, #88, #88, #88, #00
		db	#00, #20, #00, #60, #20, #20, #70, #00
		db	#00, #08, #00, #08, #08, #08, #48, #30
		db	#00, #40, #50, #60, #60, #50, #48, #00
		db	#00, #40, #40, #40, #40, #40, #30, #00
		db	#00, #00, #D0, #A8, #A8, #A8, #A8, #00
		db	#00, #00, #F0, #88, #88, #88, #88, #00
		db	#00, #00, #70, #88, #88, #88, #70, #00
		db	#00, #00, #F0, #88, #88, #F0, #80, #80
		db	#00, #00, #78, #88, #88, #78, #08, #08
		db	#00, #00, #38, #40, #40, #40, #40, #00
		db	#00, #00, #70, #80, #70, #08, #F0, #00
		db	#00, #20, #70, #20, #20, #20, #18, #00
		db	#00, #00, #88, #88, #88, #88, #70, #00
		db	#00, #00, #88, #88, #50, #50, #20, #00
		db	#00, #00, #88, #A8, #A8, #A8, #50, #00
		db	#00, #00, #88, #50, #20, #50, #88, #00
		db	#00, #00, #88, #88, #88, #78, #08, #70
		db	#00, #00, #F8, #10, #20, #40, #F8, #00
		db	#00, #38, #20, #C0, #20, #20, #38, #00
		db	#00, #10, #10, #10, #10, #10, #10, #00
		db	#00, #E0, #20, #18, #20, #20, #E0, #00
		db	#00, #28, #50, #00, #00, #00, #00, #00
		db	#00, #78, #84, #B4, #B4, #84, #78, #00

		disp	#5B00
		
pos:		ds	#02
roll:		ds	#01
TimeString	ds	#08

		ent

ProgLen:	equ	$-Start
				
ROMsize:	equ	2048 ; change 2048 to your EPROM / FLASH / EEPROM size

		if	ProgLen>ROMsize
		DISPLAY	"ROM size exceeded!"
		else
		DUP	ROMsize-ProgLen	
		db	#FF
		EDUP
		endif
